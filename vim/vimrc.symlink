set nocompatible                              " Make vim more useful
filetype off                                  " required!
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/vundle'

" Syntax checking/autocomplete plugins
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'klen/python-mode'
Plugin 'ap/vim-css-color'
Plugin 'adimit/prolog.vim'

" Class outline viewer
Plugin 'majutsushi/tagbar'

" File finder
Plugin 'ctrlpvim/ctrlp.vim'

" Git wrapper in vim
Plugin 'tpope/vim-fugitive'

" Movement improvements in vim
Plugin 'easymotion/vim-easymotion'

" Solarized colour theme
Plugin 'altercation/vim-colors-solarized'

" Super neato looking bar at the bottom
Plugin 'bling/vim-airline'

" Go Plugin
Plugin 'fatih/vim-go'

" Code-grep
Plugin 'mileszs/ack.vim'
Plugin 'rking/ag.vim'

" Surround, bracket functionality
Plugin 'tpope/vim-surround'

" Tmux Navigation
Plugin 'christoomey/vim-tmux-navigator'

" Comment lines of code
Plugin 'tpope/vim-commentary'

call vundle#end()

filetype plugin indent on

set background=dark
let g:solarized_termtrans = 1
colorscheme solarized

syntax enable
set modeline
set smartindent
set tabstop=2                                 " Tab key results in 4 spaces
set shiftwidth=2                              " The num of spaces for indenting
set backspace=indent,eol,start
set softtabstop=2                             " Tab key results in 4 spaces
set expandtab                                 " Expand tabs to spaces
set clipboard+=unnamed
set clipboard+=unnamedplus
set go+=a
set relativenumber                            " Line deltas
set number                                    " Enable line numbers
set laststatus=2                              " Always show statusline
set nofoldenable
set hlsearch                                  " Highlight all search hits
set spell                                     " Enable spell checking

"set cm=blowfish2                              "

" Backup
set noswapfile
set backupdir=~/.vim/backup

if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
endif

" Now, make python work with virtualenvs:
if has("python") && !empty($VIRTUAL_ENV)
  python << EOF
import os
import sys
a = os.environ['VIRTUAL_ENV'] + '/bin/activate_this.py'
execfile(a, dict(__file__ = a))
if 'PYTHONPATH' not in os.environ:
    os.environ['PYTHONPATH'] = ''
    os.environ['PYTHONPATH'] += os.getcwd()+":"
    os.environ['PYTHONPATH'] += ":".join(sys.path)
EOF
endif

set t_Co=256

let g:airline_powerline_fonts = 1

let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_extra_conf_globlist = ['*']

" Map f8 for Tagbar
nmap <F8> :TagbarToggle<CR>

" Remap ctrl+arrows to move between window splits
nmap <silent> <C-Up> :wincmd k<CR>
nmap <silent> <C-Down> :wincmd j<CR>
nmap <silent> <C-Left> :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>

" Remap space for use with easymotion
map <Space> \\w

" Map enter to clear highlighted search hits
nnoremap <CR> :nohlsearch<CR><CR>

" Toggle paste mode with F3
set pastetoggle=<F3>

" QuickFix close function; :q should close a window *and* the accompanying
" quickfix
aug QFClose
  au!
  " if |q| doesn't work use |cclose| ?
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

" Javascript folding that doesn't suck
let javaScript_fold=1
au FileType javascript call JavaScriptFold()

" Conceal
set conceallevel=2
hi Conceal ctermfg=231 ctermbg=233
