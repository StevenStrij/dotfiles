function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

call plug#begin('~/.vim/plug')
" Syntax checking/autocomplete plugins
" Async Autocompletion
Plug 'Shougo/deoplete.nvim', {'do': function('DoRemote')}
" C, GHC/Haskell, Python, Vim, Go
Plug 'zchee/deoplete-clang'
Plug 'eagletmt/neco-ghc'
Plug 'zchee/deoplete-jedi'
Plug 'Shougo/neco-vim'

" Go Plugins
Plug 'nsf/gocode'
Plug 'zchee/deoplete-go', { 'do': 'make'}

Plug 'neomake/neomake'
Plug 'ap/vim-css-color'
Plug 'ervandew/supertab'

" Class outline viewer
Plug 'majutsushi/tagbar'

" File finder
Plug 'ctrlpvim/ctrlp.vim'

" Git wrapper in vim
Plug 'tpope/vim-fugitive'

" Solarized colour theme
Plug 'altercation/vim-colors-solarized'

" Super neato looking bar at the bottom
Plug 'bling/vim-airline'

" Code-grep
Plug 'mileszs/ack.vim'
Plug 'rking/ag.vim'

" Surround, bracket functionality
Plug 'tpope/vim-surround'

" Tmux Navigation
Plug 'christoomey/vim-tmux-navigator'

" Comment lines of code
Plug 'tpope/vim-commentary'

call plug#end()

" Basic Vim Settings
set t_Co=256
set background=dark
let g:solarized_termtrans = 1
colorscheme solarized

set modeline
set smartindent
set tabstop=2                                 " Tab key results in 4 spaces
set shiftwidth=2                              " The num of spaces for indenting
set backspace=indent,eol,start
set softtabstop=2                             " Tab key results in 4 spaces
set expandtab                                 " Expand tabs to spaces
set clipboard+=unnamed
set clipboard+=unnamedplus
set go+=a
set relativenumber                            " Line deltas
set number                                    " Enable line numbers
set laststatus=2                              " Always show statusline
set nofoldenable
set hlsearch                                  " Highlight all search hits
set spell                                     " Enable spell checking

set autochdir

" Backup
set noswapfile
set backupdir=~/.vim/backup

" Now, make python work with virtualenvs:
if has("python") && !empty($VIRTUAL_ENV)
  python << EOF
import os
import sys
a = os.environ['VIRTUAL_ENV'] + '/bin/activate_this.py'
execfile(a, dict(__file__ = a))
if 'PYTHONPATH' not in os.environ:
    os.environ['PYTHONPATH'] = ''
    os.environ['PYTHONPATH'] += os.getcwd()+":"
    os.environ['PYTHONPATH'] += ":".join(sys.path)
EOF
endif


let g:airline_powerline_fonts = 1

" Deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#sources#clang#libclang_path='/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header='/usr/lib/clang'
let g:deoplete#sources#clang#flags=['-O2', '-Wall', '-Werror', '`pkg-config gtkmm-3.0 --cflags`']
let $PATH = $PATH . ':' . expand('~/.cabal/bin')

let g:deoplete#sources#go#gocode_binary = '/home/steven/go/bin/gocode'

" Map f8 for Tagbar
nmap <F8> :TagbarToggle<CR>

" Remap ctrl+arrows to move between window splits
nmap <silent> <C-Up> :wincmd k<CR>
nmap <silent> <C-Down> :wincmd j<CR>
nmap <silent> <C-Left> :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>

" Map enter to clear highlighted search hits
nnoremap <CR> :nohlsearch<CR><CR>

" Ctrl+\ to open ctag in new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" Alt+] to open ctag in new vertical split
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Neomake autorun
autocmd! BufEnter,BufWritePost * Neomake
let g:neomake_cpp_enabled_makers = ['clang']
let g:neomake_cpp_clang_maker = {
   \ 'exe': 'clang++',
   \ 'args': ['-std=c++14', '-O2', '-Wall', '-Werror'],
   \ }

" Supertab completion from top to bottom
let g:SuperTabDefaultCompletionType = "<c-n>"
